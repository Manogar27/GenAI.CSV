import openai
import sqlite3
import pandas as pd

openai.api_key = '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'

def get_completion(prompt, model="gpt-3.5-turbo"):
    response = openai.ChatCompletion.create(
        model=model,
        messages=[{"role": "system", "content": prompt}],
        temperature=0.5
    )
    completion_text = response.choices[0].message["content"]
    return completion_text

def extract_data_from_text(pdf_text, metric, metric_keywords):
    prompt = f"""
    Please extract and provide a comprehensive data report on the following sustainability {metric} titles and with its related {metric_keywords} from the provided PDF:
    Please extract all available numerical data, values, and relevant information related to each metric mentioned above from the provided PDF.
    The data report should be well-organized and provide a comprehensive overview of the organization's performance in terms of sustainability and relevant metrics.
    Gather all the data together to its related topic under a single metric.
    """

    completion_text = get_completion(prompt)
    extracted_value = completion_text.strip()
    return extracted_value

def run_extraction_program(pdf_text, metrics, database_file, table_name, output_file):
    # Create a dictionary to store the extracted data
    data = {}

    # Define a dictionary mapping metrics to keywords
    metric_keywords = {
        "Carbon Footprint": ["carbon footprint", "GHG accounting value", "GHG emission", "carbon emission", "carbon impact", "sustainability footprint", "ecological footprint"],
        "Energy Consumption": ["energy consumption", "power usage", "electricity consumption", "energy utilization"],
        "Water Usage": ["water consumption", "water utilization", "water usage"],
        "Waste Generation": ["waste production", "waste generation", "waste output"],
        "Employee Turnover Rate": ["employee turnover rate", "attrition rate", "staff churn"],
        "Diversity Metrics": ["diversity representation", "demographic composition", "inclusivity metrics"],
        "Health and Safety Incidents": ["workplace accidents", "safety records", "incident reports"],
        "Board Diversity": ["board composition", "board demographic", "representation at board level"],
        "CEO-to-Worker Pay Ratio": ["executive-to-staff pay ratio", "income disparity", "wage gap"],
        "Supply Chain Transparency": ["transparency in the supply chain", "supply chain visibility"],
        "Product Safety Incidents": ["safety incidents", "product quality issues", "product recall cases"],
        "Tax Transparency": ["tax disclosure", "tax reporting", "tax payment details"],
        "Innovation Investments": ["research and development spending", "innovation funding"],
        "Employee Training Hours": ["training time", "employee development hours"],
        "Customer Satisfaction Ratings": ["customer feedback", "satisfaction surveys", "customer experience ratings"]
    }

    # Process each metric
    for metric in metrics:
        if metric in metric_keywords:
            extracted_value = extract_data_from_text(pdf_text, metric, metric_keywords[metric])
            data[metric] = extracted_value
        else:
            print(f"Warning: Metric '{metric}' not found in the metric_keywords dictionary.")

    # Create a DataFrame from the extracted data
    df = pd.DataFrame([data])

    # Add the additional columns to the DataFrame
    df.insert(0, 'Name', 'Saudi Aramco')
    df.insert(1, 'Location', 'Saudi Arabia')
    df.insert(2, 'Market Cap', '2.06 trillion')
    df.insert(3, 'Website', 'aramco.com')
    df.insert(4, 'CEO Name', 'Amin H. Nasser')
    df.insert(5, 'Sustainability Report Link', 'https://www.aramco.com/en/sustainability/sustainability-report')

    # Save data to SQLite table
    conn = sqlite3.connect(database_file)
    df.to_sql(table_name, conn, if_exists='replace', index=False)
    conn.close()
    print(f"Data extracted successfully and saved to SQLite table '{table_name}' in '{database_file}'.")

    # Export data to spreadsheet format
    if output_file.endswith('.csv'):
        df.to_csv(output_file, index=False)
    elif output_file.endswith(('.xlsx', '.xls')):
        df.to_excel(output_file, index=False)
    else:
        print("Unsupported output file format.")
    print(f"Data exported to '{output_file}'.")

# Read the text from the PDF file
def read_pdf_text(file_path):
    from pdfminer.high_level import extract_text
    return extract_text(file_path)

def main(file_path, metrics, database_file, table_name, output_file):
    # Read the text from the PDF file
    pdf_text = read_pdf_text(file_path)

    # Run the extraction program
    run_extraction_program(pdf_text, metrics, database_file, table_name, output_file)

# Define the file path, metrics, database file, table name, and output file
file_path = r"C:\Users\Content0010\Downloads\2022 Sustainability report EN.pdf"
metrics = [
    "Carbon Footprint",
    "Energy Consumption",
    "Water Usage",
    "Waste Generation",
    "Employee Turnover Rate",
    "Diversity Metrics",
    "Health and Safety Incidents",
    "Board Diversity",
    "CEO-to-Worker Pay Ratio",
    "Supply Chain Transparency",
    "Product Safety Incidents",
    "Tax Transparency",
    "Innovation Investments",
    "Employee Training Hours",
    "Customer Satisfaction Ratings"
]
database_file = 'extracted_data.db'
table_name = 'metrics_data'
output_file = 'aramco(1).csv'

# Run the main program
main(file_path, metrics, database_file, table_name, output_file)
